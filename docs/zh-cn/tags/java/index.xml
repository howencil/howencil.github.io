<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - 标签 - XXOXXSXX</title>
        <link>http://example.org/zh-cn/tags/java/</link>
        <description>Java - 标签 - XXOXXSXX</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 14 Jul 2022 11:14:08 &#43;0800</lastBuildDate><atom:link href="http://example.org/zh-cn/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Java设计模式之建造者模式</title>
    <link>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 14 Jul 2022 11:14:08 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[1.定义 建造者模式是对象的创建型模式，可以将一个产品的内部表象与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。]]></description>
</item>
<item>
    <title>Java设计模式之工厂模式</title>
    <link>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 13 Jul 2022 10:27:32 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[1.工厂模式的3种形态 简单工厂模式：又称为静态工厂方法模式； 工厂方法模式：又称为多态性工厂模式； 抽象工厂模式：又称为工具箱模式。 2.简单工厂]]></description>
</item>
<item>
    <title>Java 设计模式之单例模式</title>
    <link>http://example.org/zh-cn/posts/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 12 Jul 2022 10:52:37 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[1.单例模式的特点 单例类只有一个实例对象； 该单例对象必须由单例类自行创建； 单例类对外提供一个访问该单例的全局访问点。 2.单例模式的优缺点 1.]]></description>
</item>
<item>
    <title>Spring中七种事务传播行为</title>
    <link>http://example.org/zh-cn/posts/spring%E4%B8%AD%E4%B8%83%E7%A7%8D%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</link>
    <pubDate>Tue, 21 Jun 2022 15:39:45 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/spring%E4%B8%AD%E4%B8%83%E7%A7%8D%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</guid>
    <description><![CDATA[Spring中7种事务传播行为 PROPAGATION_REQUIRED: 如果当前没有事务则新建事务。如果已经存在一个事务，则进入这个事务。 PROPAGATION_SUPPORTS: 支持当前事务，如果当前没有事务，就以非事]]></description>
</item>
<item>
    <title>Java设计模式 责任链模式</title>
    <link>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 13 Jun 2022 11:44:49 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[1.责任链模式的定义和特点 责任链模式的定义： 为了避免发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引]]></description>
</item>
<item>
    <title>开发人员写出死循环，发布上线后如何查出此问题？</title>
    <link>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</link>
    <pubDate>Wed, 08 Jun 2022 16:07:16 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[简单模拟操作 先执行top 使用jstack命令得到线程堆栈信息 执行命令jstack PID &gt; loop.txt ，PID为线程ID 查看PID的具体情况 因为jstack]]></description>
</item>
<item>
    <title>限流算法中的令牌跟漏斗区别。Zuul作用</title>
    <link>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</link>
    <pubDate>Tue, 07 Jun 2022 16:21:10 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</guid>
    <description><![CDATA[1.高并发3把利器 缓存： 缓存的目的是提升系统访问速度和增大系统处理容量； 降级： 降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服]]></description>
</item>
<item>
    <title>Volatile的作用？</title>
    <link>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
    <pubDate>Tue, 07 Jun 2022 15:19:40 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
    <description><![CDATA[1.volatile的作用 能保证共享变量的可见性，即一个线程对共享变量进行修改，其他线程能够立即获得修改后的值。（volatile变量修改后]]></description>
</item>
<item>
    <title>说一下ReentrantLock的实现？</title>
    <link>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Tue, 07 Jun 2022 15:16:02 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[1.什么是ReentrantLock ReentrantLock是一个可重入的互斥锁。 可重入性：可以支持一个线程对锁的重复获取 公平锁/非公平锁]]></description>
</item>
<item>
    <title>ConcurrentHashMap怎么保证线程安全的？</title>
    <link>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</link>
    <pubDate>Tue, 07 Jun 2022 15:14:26 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</guid>
    <description><![CDATA[1.先说结论 ConcurrentHashMap主要使用的是CAS+自旋+synchronized+多重check来保证在初始化、新增、扩容时]]></description>
</item>
</channel>
</rss>
