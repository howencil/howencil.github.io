<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - XXOXXSXX</title>
        <link>http://example.org/zh-cn/posts/</link>
        <description>所有文章 | XXOXXSXX</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 09 Jun 2022 14:14:09 &#43;0800</lastBuildDate><atom:link href="http://example.org/zh-cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>MySQL脏页是什么？</title>
    <link>http://example.org/zh-cn/posts/mysql%E8%84%8F%E9%A1%B5%E6%98%AF%E4%BB%80%E4%B9%88/</link>
    <pubDate>Thu, 09 Jun 2022 14:14:09 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/mysql%E8%84%8F%E9%A1%B5%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
    <description><![CDATA[1.MySQL脏页 干净页：内存和磁盘中的数据一致。 脏页：内存和磁盘中的数据不一致。 2.为什么会出现脏页 平时很快的更新操作，都是写在内存和日志]]></description>
</item>
<item>
    <title>MySQL三大日志</title>
    <link>http://example.org/zh-cn/posts/mysql%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97/</link>
    <pubDate>Wed, 08 Jun 2022 18:47:35 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/mysql%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97/</guid>
    <description><![CDATA[1. 三大日志 MySQL的日志系统分为3类： redo log ：重做日志，redolog是InnoDB存储引擎层的日志。作用是确保日志的持久性，防止在发生故障]]></description>
</item>
<item>
    <title>开发人员写出死循环，发布上线后如何查出此问题？</title>
    <link>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</link>
    <pubDate>Wed, 08 Jun 2022 16:07:16 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[简单模拟操作 先执行top 使用jstack命令得到线程堆栈信息 执行命令jstack PID &gt; loop.txt ，PID为线程ID 查看PID的具体情况 因为jstack]]></description>
</item>
<item>
    <title>限流算法中的令牌跟漏斗区别。Zuul作用</title>
    <link>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</link>
    <pubDate>Tue, 07 Jun 2022 16:21:10 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</guid>
    <description><![CDATA[1.高并发3把利器 缓存： 缓存的目的是提升系统访问速度和增大系统处理容量； 降级： 降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服]]></description>
</item>
<item>
    <title>如何保证消息不重复消费，如何保证消息不丢失，如何实现消息消费顺序性</title>
    <link>http://example.org/zh-cn/posts/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%80%A7/</link>
    <pubDate>Tue, 07 Jun 2022 16:18:14 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%80%A7/</guid>
    <description><![CDATA[1.如何保证消息不重复消费 1.出现重复消费的场景 首先各类消息中间件都有可能出现消息重复消费的问题，因为此类问题通常不是由MQ来保证的，而是消]]></description>
</item>
<item>
    <title>数据库的四大特性</title>
    <link>http://example.org/zh-cn/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
    <pubDate>Tue, 07 Jun 2022 15:31:24 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
    <description><![CDATA[1.4大特性 原子性：事务的所有SQL操作作为原子工作单位执行，要么全部执行，要么全部不执行； 一致性：事务完成后，所有数据的状态都是一致的，比]]></description>
</item>
<item>
    <title>Volatile的作用？</title>
    <link>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
    <pubDate>Tue, 07 Jun 2022 15:19:40 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
    <description><![CDATA[1.volatile的作用 能保证共享变量的可见性，即一个线程对共享变量进行修改，其他线程能够立即获得修改后的值。（volatile变量修改后]]></description>
</item>
<item>
    <title>说一下ReentrantLock的实现？</title>
    <link>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Tue, 07 Jun 2022 15:16:02 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[1.什么是ReentrantLock ReentrantLock是一个可重入的互斥锁。 可重入性：可以支持一个线程对锁的重复获取 公平锁/非公平锁]]></description>
</item>
<item>
    <title>ConcurrentHashMap怎么保证线程安全的？</title>
    <link>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</link>
    <pubDate>Tue, 07 Jun 2022 15:14:26 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</guid>
    <description><![CDATA[1.先说结论 ConcurrentHashMap主要使用的是CAS+自旋+synchronized+多重check来保证在初始化、新增、扩容时]]></description>
</item>
<item>
    <title>并发操作hashmap会出现什么问题？</title>
    <link>http://example.org/zh-cn/posts/%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Chashmap%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</link>
    <pubDate>Tue, 07 Jun 2022 15:13:07 &#43;0800</pubDate>
    <author>插画师</author>
    <guid>http://example.org/zh-cn/posts/%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Chashmap%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[HashMap多线程并发问题分析-正常和异常的rehash1(阿里) - aspirant - 博客园 1.可能引发的问题 多线程put后可能导致get死循环。 多线程]]></description>
</item>
</channel>
</rss>
