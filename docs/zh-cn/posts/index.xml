<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XXOXXSXX</title>
    <link>http://example.org/zh-cn/posts/</link>
    <description>Recent content in Posts on XXOXXSXX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 11 Jun 2022 02:36:59 +0800</lastBuildDate><atom:link href="http://example.org/zh-cn/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言初始化配置</title>
      <link>http://example.org/zh-cn/posts/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 11 Jun 2022 02:36:59 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/go%E8%AF%AD%E8%A8%80%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</guid>
      <description>1.使用homebrew安装go brew install go 2.设置代理 go env -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct 参考文章：「2022 版」轻松搞定 Go 开发环境</description>
    </item>
    
    <item>
      <title>MySQL的多版本并发控制(MVCC)是什么？</title>
      <link>http://example.org/zh-cn/posts/mysql%E7%9A%84%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6mvcc%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 09 Jun 2022 14:51:20 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/mysql%E7%9A%84%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6mvcc%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MySQL脏页是什么？</title>
      <link>http://example.org/zh-cn/posts/mysql%E8%84%8F%E9%A1%B5%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 09 Jun 2022 14:14:09 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/mysql%E8%84%8F%E9%A1%B5%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>1.MySQL脏页 干净页：内存和磁盘中的数据一致。 脏页：内存和磁盘中的数据不一致。 2.为什么会出现脏页 平时很快的更新操作，都是写在内存和日志</description>
    </item>
    
    <item>
      <title>MySQL三大日志</title>
      <link>http://example.org/zh-cn/posts/mysql%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 08 Jun 2022 18:47:35 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/mysql%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97/</guid>
      <description>1. 三大日志 MySQL的日志系统分为3类： redo log ：重做日志，redolog是InnoDB存储引擎层的日志。作用是确保日志的持久性，防止在发生故障</description>
    </item>
    
    <item>
      <title>开发人员写出死循环，发布上线后如何查出此问题？</title>
      <link>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 08 Jun 2022 16:07:16 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%86%99%E5%87%BA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E5%87%BA%E6%AD%A4%E9%97%AE%E9%A2%98/</guid>
      <description>简单模拟操作 先执行top 使用jstack命令得到线程堆栈信息 执行命令jstack PID &amp;gt; loop.txt ，PID为线程ID 查看PID的具体情况 因为jstack</description>
    </item>
    
    <item>
      <title>限流算法中的令牌跟漏斗区别。Zuul作用</title>
      <link>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 07 Jun 2022 16:21:10 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E4%BB%A4%E7%89%8C%E8%B7%9F%E6%BC%8F%E6%96%97%E5%8C%BA%E5%88%ABzuul%E4%BD%9C%E7%94%A8/</guid>
      <description>1.高并发3把利器 缓存： 缓存的目的是提升系统访问速度和增大系统处理容量； 降级： 降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服</description>
    </item>
    
    <item>
      <title>如何保证消息不重复消费，如何保证消息不丢失，如何实现消息消费顺序性</title>
      <link>http://example.org/zh-cn/posts/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%80%A7/</link>
      <pubDate>Tue, 07 Jun 2022 16:18:14 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%80%A7/</guid>
      <description>1.如何保证消息不重复消费 1.出现重复消费的场景 首先各类消息中间件都有可能出现消息重复消费的问题，因为此类问题通常不是由MQ来保证的，而是消</description>
    </item>
    
    <item>
      <title>数据库的四大特性</title>
      <link>http://example.org/zh-cn/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Tue, 07 Jun 2022 15:31:24 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <description>1.4大特性 原子性：事务的所有SQL操作作为原子工作单位执行，要么全部执行，要么全部不执行； 一致性：事务完成后，所有数据的状态都是一致的，比</description>
    </item>
    
    <item>
      <title>Volatile的作用？</title>
      <link>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 07 Jun 2022 15:19:40 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/volatile%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>1.volatile的作用 能保证共享变量的可见性，即一个线程对共享变量进行修改，其他线程能够立即获得修改后的值。（volatile变量修改后</description>
    </item>
    
    <item>
      <title>说一下ReentrantLock的实现？</title>
      <link>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 07 Jun 2022 15:16:02 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E8%AF%B4%E4%B8%80%E4%B8%8Breentrantlock%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>1.什么是ReentrantLock ReentrantLock是一个可重入的互斥锁。 可重入性：可以支持一个线程对锁的重复获取 公平锁/非公平锁</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap怎么保证线程安全的？</title>
      <link>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</link>
      <pubDate>Tue, 07 Jun 2022 15:14:26 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/concurrenthashmap%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</guid>
      <description>1.先说结论 ConcurrentHashMap主要使用的是CAS+自旋+synchronized+多重check来保证在初始化、新增、扩容时</description>
    </item>
    
    <item>
      <title>并发操作hashmap会出现什么问题？</title>
      <link>http://example.org/zh-cn/posts/%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Chashmap%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 07 Jun 2022 15:13:07 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9Chashmap%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</guid>
      <description>HashMap多线程并发问题分析-正常和异常的rehash1(阿里) - aspirant - 博客园 1.可能引发的问题 多线程put后可能导致get死循环。 多线程</description>
    </item>
    
    <item>
      <title>Hashmap的原理？hashmap为什么用红黑树？</title>
      <link>http://example.org/zh-cn/posts/hashmap%E7%9A%84%E5%8E%9F%E7%90%86hashmap%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Tue, 07 Jun 2022 15:07:41 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/hashmap%E7%9A%84%E5%8E%9F%E7%90%86hashmap%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>1.数据结构 数组+链表/红黑树 1.什么是Node HashMap类有一个非常重要的属性Node&amp;lt;K,V&amp;gt;，是HashMap的一个内</description>
    </item>
    
    <item>
      <title>ForkJoinPool和一般的线程池有什么区别？</title>
      <link>http://example.org/zh-cn/posts/forkjoinpool%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 07 Jun 2022 15:03:47 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/forkjoinpool%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>说在前面 首先是结论： ForkJoinPool不是为了替代ExecutorService，而是他的补充，在某些场景下性能比ExecutorSe</description>
    </item>
    
    <item>
      <title>线程池是怎么配置的？线程池的执行流程？</title>
      <link>http://example.org/zh-cn/posts/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%98%AF%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 07 Jun 2022 10:31:14 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%98%AF%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>1.线程池如何配置 线程池的主要参数： 核心线程数 最大线程数 空闲时间 时间单位 拒绝策略 任务队列 核心线程数量大小选择 | 看业务选择 CPU密集型：核心数</description>
    </item>
    
    <item>
      <title>配置多个Git账号</title>
      <link>http://example.org/zh-cn/posts/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Mon, 06 Jun 2022 19:44:01 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7/</guid>
      <description>参考文章</description>
    </item>
    
    <item>
      <title>使用hugo在GitHub Pages上搭建博客</title>
      <link>http://example.org/zh-cn/posts/%E4%BD%BF%E7%94%A8hugo/</link>
      <pubDate>Mon, 06 Jun 2022 19:42:09 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/%E4%BD%BF%E7%94%A8hugo/</guid>
      <description>参考文章：如何使用Hugo在GitHub Pages上搭建免费个人网站</description>
    </item>
    
    <item>
      <title>Hugo配置主题LoveIt</title>
      <link>http://example.org/zh-cn/posts/hugo%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98loveit/</link>
      <pubDate>Mon, 06 Jun 2022 14:58:02 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/hugo%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98loveit/</guid>
      <description>参考文章</description>
    </item>
    
    <item>
      <title>Hugo添加tags等分类</title>
      <link>http://example.org/zh-cn/posts/hugo%E6%B7%BB%E5%8A%A0tags%E7%AD%89%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 06 Jun 2022 14:53:34 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/hugo%E6%B7%BB%E5%8A%A0tags%E7%AD%89%E5%88%86%E7%B1%BB/</guid>
      <description>自定义分类 Hugo是支持用户自定义分类的，这个称为taxonomy，可以来对网页内容进行逻辑划分，详情可以在这里查看。 分类taxonomy有</description>
    </item>
    
    <item>
      <title>Hugo文章模板的前置参数</title>
      <link>http://example.org/zh-cn/posts/hugo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%89%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 06 Jun 2022 14:35:55 +0800</pubDate>
      
      <guid>http://example.org/zh-cn/posts/hugo%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%89%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</guid>
      <description>title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日</description>
    </item>
    
  </channel>
</rss>
